{"version":3,"sources":["../../../../src/scripts/utlis/dbGeneral/refreshGeneral.js"],"names":["refreshGeneral","init","dataArr","_show","_initSentence","_renderAll","showSentenceFunc","generateFunc","length","document","querySelector","innerHTML","text","all","randomAphorism","classifiedData","_classifyData","finished","unfishied","forEach","data","push","concat","part","_renderPart","clear","sentenceHandler","rendered"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAkB,YAAM;AAC5B,WAASC,IAAT,CAAcC,OAAd,EAAuB;AACrBC,UAAMD,OAAN,EAAeE,aAAf,EAA8BC,UAA9B;AACD;;AAED,WAASF,KAAT,CAAeD,OAAf,EAAwBI,gBAAxB,EAA0CC,YAA1C,EAAwD;AACtD,QAAI,CAACL,OAAD,IAAYA,QAAQM,MAAR,KAAmB,CAAnC,EAAsC;AACpCF;AACD,KAFD,MAEO;AACLG,eAASC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4CJ,aAAaL,OAAb,CAA5C;AACD;AACF;;AAED,WAASE,aAAT,GAAyB;AACvB,QAAMQ,OAAO,gDAAb;;AAEAH,aAASC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4C,iCAAkBC,IAAlB,CAA5C;AACD;;AAED,WAASC,GAAT,CAAaC,cAAb,EAA6BZ,OAA7B,EAAsC;AACpCC,UAAMD,OAAN,EAAeY,cAAf,EAA+BT,UAA/B;AACD;;AAED,WAASA,UAAT,CAAoBH,OAApB,EAA6B;AAC3B,QAAMa,iBAAiBC,cAAcd,OAAd,CAAvB;;AAEA,WAAO,6BAAca,cAAd,CAAP;AACD;;AAED,WAASC,aAAT,CAAuBd,OAAvB,EAAgC;AAC9B,QAAMe,WAAW,EAAjB;AACA,QAAMC,YAAY,EAAlB;;AAEA;AACAhB,YAAQiB,OAAR,CAAgB;AAAA,aAASC,KAAKH,QAAL,GAAgBA,SAASI,IAAT,CAAcD,IAAd,CAAhB,GAAsCF,UAAUG,IAAV,CAAeD,IAAf,CAA/C;AAAA,KAAhB;;AAEA,WAAOF,UAAUI,MAAV,CAAiBL,QAAjB,CAAP;AACD;;AAED,WAASM,IAAT,CAAcT,cAAd,EAA8BZ,OAA9B,EAAuC;AACrCC,UAAMD,OAAN,EAAeY,cAAf,EAA+BU,WAA/B;AACD;;AAED,WAASA,WAAT,CAAqBtB,OAArB,EAA8B;AAC5B,WAAO,6BAAcA,OAAd,CAAP;AACD;;AAED,WAASuB,KAAT,GAAiB;AACf,mCAAgBhB,SAASC,aAAT,CAAuB,OAAvB,CAAhB;AACD;;AAED,WAASgB,eAAT,CAAyBd,IAAzB,EAA+B;AAC7B,QAAMe,WAAW,iCAAkBf,IAAlB,CAAjB;;AAEAH,aAASC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4CgB,QAA5C;AACD;;AAGD,SAAO;AACL1B,cADK;AAELY,YAFK;AAGLU,cAHK;AAILE,gBAJK;AAKLC;AALK,GAAP;AAOD,CAjEsB,EAAvB;;kBAmEe1B,c","file":"refreshGeneral.js","sourcesContent":["import itemGenerator from '../templete/itemGenerator';\nimport sentenceGenerator from '../templete/sentenceGenerator';\nimport clearChildNodes from '../clearChildNodes';\n\nconst refreshGeneral = (() => {\n  function init(dataArr) {\n    _show(dataArr, _initSentence, _renderAll);\n  }\n\n  function _show(dataArr, showSentenceFunc, generateFunc) {\n    if (!dataArr || dataArr.length === 0) {\n      showSentenceFunc();\n    } else {\n      document.querySelector('#list').innerHTML = generateFunc(dataArr);\n    }\n  }\n\n  function _initSentence() {\n    const text = 'Welcome~, try to add your first to-do list : )';\n\n    document.querySelector('#list').innerHTML = sentenceGenerator(text);\n  }\n\n  function all(randomAphorism, dataArr) {\n    _show(dataArr, randomAphorism, _renderAll);\n  }\n\n  function _renderAll(dataArr) {\n    const classifiedData = _classifyData(dataArr);\n\n    return itemGenerator(classifiedData);\n  }\n\n  function _classifyData(dataArr) {\n    const finished = [];\n    const unfishied = [];\n\n    // put the finished item to the bottom\n    dataArr.forEach(data => (data.finished ? finished.push(data) : unfishied.push(data)));\n\n    return unfishied.concat(finished);\n  }\n\n  function part(randomAphorism, dataArr) {\n    _show(dataArr, randomAphorism, _renderPart);\n  }\n\n  function _renderPart(dataArr) {\n    return itemGenerator(dataArr);\n  }\n\n  function clear() {\n    clearChildNodes(document.querySelector('#list'));\n  }\n\n  function sentenceHandler(text) {\n    const rendered = sentenceGenerator(text);\n\n    document.querySelector('#list').innerHTML = rendered;\n  }\n\n\n  return {\n    init,\n    all,\n    part,\n    clear,\n    sentenceHandler,\n  };\n})();\n\nexport default refreshGeneral;\n"]}