{"version":3,"sources":["../../../../src/scripts/utlis/eventHandler/dbSuccess.js"],"names":["EventHandler","storeName","add","inputValue","document","querySelector","value","window","alert","_addHandler","newData","dataGenerator","getNewKey","rendered","ifEmpty","removeInit","insertAdjacentHTML","resetInput","addItem","enterAdd","e","keyCode","clickLi","targetLi","target","classList","contains","getAttribute","toggle","id","parseInt","getItem","_toggleLi","data","finished","updateItem","showAll","removeLi","className","removeChild","parentNode","addRandom","removeItem","list","hasChildNodes","random","showInit","getAll","init","all","showDone","_showWhetherDone","showTodo","whetherDone","condition","getWhetherConditionItem","part","showClearDone","removeWhetherConditionItem","showClear","clear"],"mappings":"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","file":"dbSuccess.js","sourcesContent":["import DB from 'indexeddb-crud';\nimport Refresh from '../refresh/dbSuccess';\nimport General from './general';\nimport itemGenerator from '../templete/itemGenerator';\n\nconst EventHandler = (() => {\n  const storeName = 'list';\n\n  function add() {\n    const inputValue = document.querySelector('#input').value;\n\n    if (inputValue === '') {\n      window.alert('please input a real data~');\n    } else {\n      _addHandler(inputValue);\n    }\n  }\n\n  function _addHandler(inputValue) {\n    const newData = General.dataGenerator(DB.getNewKey(storeName), inputValue);\n    const rendered = itemGenerator(newData);\n\n    General.ifEmpty.removeInit();\n    document.querySelector('#list').insertAdjacentHTML('afterbegin', rendered); // PUNCHLINE: use insertAdjacentHTML\n    General.resetInput();\n    DB.addItem(storeName, newData);\n  }\n\n  function enterAdd(e) {\n    if (e.keyCode === 13) {\n      add();\n    }\n  }\n\n  function clickLi(e) {\n    const targetLi = e.target;\n    // use event delegation\n\n    if (!targetLi.classList.contains('aphorism')) {\n      if (targetLi.getAttribute('data-id')) {\n        targetLi.classList.toggle('finished'); // toggle appearance\n        const id = parseInt(targetLi.getAttribute('data-id'), 10); // use previously stored data-id attribute\n        DB.getItem(storeName, id, _toggleLi);\n      }\n    }\n  }\n\n  function _toggleLi(data) {\n    const newData = data;\n\n    newData.finished = !data.finished;\n    DB.updateItem(storeName, newData, showAll);\n  }\n\n  // li's [x]'s delete\n  function removeLi(e) {\n    if (e.target.className === 'close') { // use event delegation\n      // delete visually\n      document.querySelector('#list').removeChild(e.target.parentNode);\n      addRandom();\n      // use previously stored data\n      const id = parseInt(e.target.parentNode.getAttribute('data-id'), 10);\n      // delete actually\n      DB.removeItem(storeName, id);\n    }\n  }\n\n  // for Semantic\n  function addRandom() {\n    const list = document.querySelector('#list');\n\n    if (!list.hasChildNodes()) {\n      Refresh.random();\n    }\n  }\n\n  function showInit() {\n    DB.getAll(storeName, Refresh.init);\n  }\n\n  function showAll() {\n    DB.getAll(storeName, Refresh.all);\n  }\n\n  function showDone() {\n    _showWhetherDone(true);\n  }\n\n  function showTodo() {\n    _showWhetherDone(false);\n  }\n\n  function _showWhetherDone(whetherDone) {\n    const condition = 'finished';\n\n    DB.getWhetherConditionItem(storeName, condition, whetherDone, Refresh.part);\n  }\n\n  function showClearDone() {\n    const condition = 'finished';\n\n    DB.removeWhetherConditionItem(storeName, condition, true, () => {\n      DB.getAll(storeName, Refresh.part);\n    });\n  }\n\n  function showClear() {\n    Refresh.clear(); // clear nodes visually\n    Refresh.random();\n    DB.clear(storeName); // clear data indeed\n  }\n\n  return {\n    add,\n    enterAdd,\n    clickLi,\n    removeLi,\n    showInit,\n    showAll,\n    showDone,\n    showTodo,\n    showClearDone,\n    showClear,\n  };\n})();\n\nexport default EventHandler;\n"]}