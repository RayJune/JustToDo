{"version":3,"sources":["bundle.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","resetNodes","root","document","querySelector","hasChildNodes","removeChild","firstChild","showData","DB","retrieveAllData","refreshNodes","dataArr","fragment","createDocumentFragment","len","insertBefore","refreshOneNode","appendChild","console","log","data","span","x","textDate","createTextNode","userDate","textWrap","createElement","text","userEvent","li","finished","classList","add","className","setAttribute","id","getAttribute","addOneList","newNodeData","newNode","input","value","date","getNewDate","parent","dataId","getUserId","alert","createOneData","fmt","newDate","Date","newfmt","y+","getFullYear","M+","getMonth","d+","getDate","h+","getHours","m+","getMinutes","k","RegExp","test","replace","$1","substr","lens","handleEnterEvent","keyCode","handleLiClickDelegation","thisLi","target","dataIndex","parseInt","retrieveOneData","switchLi","remove","updateDate","handleXClickDelagation","deleteOneData","nodeId","showWhetherDone","whether","retrieveDataWhetherDone","showDataDone","showDataTodo","deleteAllData","dbConfig","name","version","dataDemo","init","myUl","addEventListener","getElementById","./myIndexedDB","2","myIndexedDB","openDB","openDBCallback","request","indexedDB","open","onerror","onsuccess","dbResult","result","getId","onupgradeneeded","objectStoreNames","contains","store","createObjectStore","keyPath","autoIncrement","handleTransaction","whetherWrite","transaction","objectStore","rangeToAll","IDBKeyRange","lowerBound","storeHander","range","openCursor","cursor","continue","userID","initCallback","window","newData","createOneDataCallback","callbackParaArr","addOpt","apply","index","retrieveOneDataCallback","getDataIndex","get","unshift","key","retrieveDataWhetherDoneCallback","push","retrieveAllDataCallback","allDataArr","changedData","updateDateCallback","putStore","put","deleteOneDataCallback","deleteOpt","delete","deleteAllDataCallback","requestDel","this"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n(function goToDo() {\n  var DB = require('./myIndexedDB'); // 导入模块并重命名\n  var dbConfig = {  // 创建数据库配置参数\n    name: 'justToDo',\n    version: '1'\n  };\n  dbConfig.dataDemo = { // 配置想要的数据结构存入数据库\n    id: 0,\n    userEvent: 0,\n    finished: true,\n    date: 0\n  };\n\n  DB.init(dbConfig, addEventListeners); // 启动indexedDB，并调用展示数据函数、添加所有事件处理的函数\n\n\n  /* 经常调用的函数  */\n\n  // 数据库启动完成后显示数据，以及添加事件处理函数\n  function addEventListeners() {\n    showData(); // 将数据展示\n    // 添加事件处理函数\n    var myUl = document.querySelector('#myUl');\n    myUl.addEventListener('click', handleLiClickDelegation, false);\n    myUl.addEventListener('click', handleXClickDelagation, false);\n    document.getElementById('add').addEventListener('click', addOneList, false);\n    document.addEventListener('keydown', handleEnterEvent, true);\n    document.getElementById('done').addEventListener('click', showDataDone, false);\n    document.getElementById('todo').addEventListener('click', showDataTodo, false);\n    document.getElementById('all').addEventListener('click', showData, false);\n    document.getElementById('delete').addEventListener('click', deleteAllData, false);\n  }\n\n  // 重置所有节点为0\n  function resetNodes() { // 重置ul为0\n    var root = document.querySelector('#myUl');\n\n    while (root.hasChildNodes()) {\n      root.removeChild(root.firstChild); // 这是最快的清除所有子节点的方法\n    }\n  }\n\n  // showData同时也是all的事件处理函数\n  function showData() { // 取出并展示所有list数据\n    resetNodes(); // 先重置ul\n    DB.retrieveAllData(refreshNodes); // 向retrieveAllData传入回调函数\n    // 这样数据库一旦数据查询完毕/数据装在到数组中，就调用refreshNodes来展示数据\n  }\n\n  function refreshNodes(dataArr) { // 刷新一组节点，并展示出来\n    var fragment = document.createDocumentFragment();  // 利用fragment来包裹li们，这样可以将多次DOM操作减少为一次DOM操作\n    var i;\n    var len = dataArr.length;\n\n    for (i = 0; i < len; i++) {\n      fragment.insertBefore(refreshOneNode(dataArr[i]), fragment.firstChild); // 每一个新加入的元素都排在最前面\n    }\n    // 将fragment添加到DOM中，因为运用了fragment，所以只用操纵这一次DOM就好\n    document.querySelector('#myUl').appendChild(fragment);\n    console.log('刷新，并展示DOM完毕');\n  }\n\n  function refreshOneNode(data) { // 刷新一个list节点，并返回一个fragment\n    var textDate = document.createTextNode(data.userDate + ': ');\n    var textWrap = document.createElement('span');\n    var text = document.createTextNode(' ' + data.userEvent);\n    var li = document.createElement('li');\n    var span;\n    var x;\n\n    // 包装节点\n    textWrap.appendChild(text);\n    li.appendChild(textDate);\n    li.appendChild(textWrap);\n\n    // 根据完成的情况来确定是否添加完成样式\n    if (data.finished) {\n      li.classList.add('checked');\n    }\n\n    // 给每个li后面加上关闭按钮，并添加【x】删除事件\n    span = document.createElement('span');\n    x = document.createTextNode('\\u00D7'); // unicode下的【x】\n    span.className = 'close';\n    span.appendChild(x);\n\n    // 为每个[x]添加data-x属性值，方便对span[x]添加事件处理函数（准确的说是事件代理）\n    span.setAttribute('data-x', data.id);\n    li.appendChild(span);\n\n    // 为每个节点添加data-index属性值，方便对li添加事件处理函数（准确的说是事件代理）\n    if (!li.getAttribute('data-index')) {\n      li.setAttribute('data-index', data.id);\n    }\n    return li;  // 返回创建的节点，进行进一步操作\n  }\n\n\n  /* add的事件处理函数  */\n\n  // 添加一条新list数据\n  function addOneList() {\n    // 首先获取输入框中的数据\n    var input = document.querySelector('#myInput');\n    var value = input.value;\n    var date = getNewDate('yyyy年MM月dd日 hh:mm');\n    var newNodeData;\n    var newNode;\n    var parent = document.querySelector('#myUl');\n    var dataId = DB.getUserId();\n\n    dataId++;\n    if (value === '') {\n      alert('请亲传入数据后重新提交~');\n      return false;\n    }\n    // 整合为一个完整的数据\n    newNodeData = {\n      id: dataId,\n      userEvent: value,\n      finished: false,\n      userDate: date\n    };\n\n    // 添加节点\n    newNode = refreshOneNode(newNodeData);\n    newNode.setAttribute('data-index', newNodeData.id);\n    parent.insertBefore(newNode, parent.firstChild);\n\n    // 重置输入框为0\n    input.value = '';\n\n    // 将新节点的数据添加到数据库中\n    DB.createOneData(newNodeData);\n    return 0;\n  }\n\n  // 格式化日期，用来格式化li中的日期显示\n  function getNewDate(fmt) {\n    var newDate = new Date();\n    var newfmt = fmt;\n    var o = {\n      'y+': newDate.getFullYear(),\n      'M+': newDate.getMonth() + 1, // 月份\n      'd+': newDate.getDate(), // 日\n      'h+': newDate.getHours(), // 小时\n      'm+': newDate.getMinutes() // 分\n    };\n\n    for (var k in o) {\n      if (new RegExp('(' + k + ')').test(newfmt)) {\n        if (k === 'y+') {\n          newfmt = newfmt.replace(RegExp.$1, ('' + o[k]).substr(4 - RegExp.$1.length));\n        } else if (k === 'S+') {\n          var lens = RegExp.$1.length;\n          lens = lens === 1 ? 3 : lens;\n          newfmt = newfmt.replace(RegExp.$1, ('00' + o[k]).substr(('' + o[k]).length - 1, lens));\n        } else {\n          newfmt = newfmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));\n        }\n      }\n    }\n\n    return newfmt;\n  }\n\n\n  /* 添加回车键触发list的事件处理函数  */\n\n  function handleEnterEvent(e) {\n    if (e.keyCode === 13) {\n      addOneList();\n    }\n  }\n\n\n  /* 点击li的事件处理函数  */\n\n  // 利用事件代理，将本来绑定在每个li上的事件处理函数绑定在ul上\n  function handleLiClickDelegation(e) {\n    var thisLi = e.target;\n\n    if (thisLi.getAttribute('data-index')) {\n      var dataIndex = parseInt(thisLi.getAttribute('data-index'), 10); // 获得对应id值, 并转化为数字，方便查询\n      console.log(dataIndex);\n      console.log(typeof dataIndex);\n      DB.retrieveOneData(dataIndex, switchLi, [thisLi]);\n    }\n  }\n\n  function switchLi(data, thisLi) {\n    console.log(data);\n    thisLi.finished = !data.finished; // 切换\n    if (thisLi.finished) {  // 添加样式\n      thisLi.classList.add('checked');\n    } else {\n      thisLi.classList.remove('checked');\n    }\n    data.finished = thisLi.finished;  // 修改数据\n\n    // 把数据同步到数据库\n    DB.updateDate(data);\n  }\n\n\n  /* li上[x]点击的事件处理函数（删除这一条list）  */\n\n  function handleXClickDelagation(e) {\n    if (e.target.className === 'close') {\n      var nodeId = parseInt(e.target.getAttribute('data-x'), 10); // 取得之前设置的自定义属性，保存的就是数据库中对应的id\n      deleteOneData(nodeId);\n    }\n  }\n\n  function deleteOneData(nodeId) {\n    DB.deleteOneData(nodeId); // 从数据库中删除，并在删除后调用\n    showData(); // 从修改后的数据库中重新展示list\n  }\n\n  /* 显示所有 已/未 完成list的事件处理函数  */\n\n  function showWhetherDone(whether) {\n    var key = 'finished'; // 设置key为finished\n    resetNodes();   // 先重置ul列表\n    DB.retrieveDataWhetherDone(whether, key, refreshNodes); // 从数据库中获取数据并用回调函数来展示\n    console.log('显示数据完毕');\n  }\n\n  // 显示所有已完成的list\n  function showDataDone() {\n    showWhetherDone(true);\n  }\n\n  // 显示所有未完成的list\n  function showDataTodo() {\n    showWhetherDone(false);\n  }\n\n  /* 删除所有数据的事件处理函数  */\n\n  // 删除所有list数据\n  function deleteAllData() {\n    resetNodes();         // 重置DOM节点，先从视觉上删除\n    DB.deleteAllData();  // 从数据库中删除，真正的删除数据\n  }\n}());\n\n},{\"./myIndexedDB\":2}],2:[function(require,module,exports){\n'use strict';\n// use module pattern\nvar myIndexedDB = (function handleIndexedDB() {\n  /* 初始化db用到的函数 */\n  var userID;\n  var dbResult;\n\n  function init(dbConfig, initCallback) {\n    // 首先检测浏览器indexedDB可用性\n    if (!window.indexedDB) {\n      window.alert('Your browser doesn\\'t support a stable version of IndexedDB. Such and such feature will not be available.');\n      return 0;\n    }\n    if (initCallback) {\n      openDB(dbConfig, initCallback);  // 启动indexedDB\n    }\n\n    return 0;\n  }\n\n  function openDB(dbConfig, openDBCallback) {\n    var request = indexedDB.open(dbConfig.name, dbConfig.version); // 打开数据库\n\n    request.onerror = function error() {\n      console.log('indexDB加载失败');\n    };\n    // 异步处理成功后才能获取到\n    request.onsuccess = function success(e) {\n      dbResult = e.target.result;\n      getId();\n      if (openDBCallback) {\n        openDBCallback();\n      }\n    };\n\n    request.onupgradeneeded = function schemaChanged(e) { // 在我们请求打开的数据库的版本号和已经存在的数据库版本号不一致的时候调用。\n      dbResult = e.target.result;\n      if (!dbResult.objectStoreNames.contains('user')) {\n        // 在这里可以设置键值，也可以是auto\n        var store = dbResult.createObjectStore('user', { keyPath: 'id', autoIncrement: true }); // 创建db\n      }\n      // 在这里新建好一个数据库demo\n      store.add(dbConfig.dataDemo);\n    };\n  }\n\n  /* private method */\n\n  function handleTransaction(whetherWrite) {\n    var transaction;\n    if (whetherWrite) {\n      transaction = dbResult.transaction(['user'], 'readwrite');\n    } else {\n      transaction = dbResult.transaction(['user']);\n    }\n    return transaction.objectStore('user');\n  }\n\n  function rangeToAll() {\n    return IDBKeyRange.lowerBound(0, true);\n  }\n\n  // 获取当前的ID值，openDB中要用\n  function getId() {\n    var storeHander = handleTransaction(true);\n    var range = rangeToAll();\n\n    storeHander.openCursor(range, 'next').onsuccess = function get(e) {\n      var cursor = e.target.result;\n\n      if (cursor) {\n        cursor.continue();\n        userID = cursor.value.id;\n      } else {\n        console.log('现在的id为:' + userID);\n      }\n    };\n  }\n\n  /* 操作数据库用到的函数 CRUD */\n\n  // Create 增加\n  // 添加一个数据到数据库中\n  function createOneData(newData, createOneDataCallback, callbackParaArr) {\n    // 添加list数据到数据库中\n    var storeHander = handleTransaction(true);\n    var addOpt = storeHander.add(newData);\n    addOpt.onerror = function error() {\n      console.log('添加到数据库失败');\n    };\n    addOpt.onsuccess = function success() {\n      console.log('添加到数据库成功');\n      if (createOneDataCallback) { // 如果传入回调函数，则数据库添加成功后调用回调函数\n        if (!callbackParaArr) {\n          createOneDataCallback();\n        } else {\n          createOneDataCallback.apply(null, callbackParaArr);\n        }\n      }\n    };\n  }\n\n  // Retrieve: 读取\n  // 根据一个index值读取数据库的一个数据，并在读取后调用回调函数\n  function retrieveOneData(index, retrieveOneDataCallback, callbackParaArr) {\n    var storeHander = handleTransaction(false);\n    var getDataIndex = storeHander.get(index);  // 在数据库中获取到相应的对象数值\n\n    getDataIndex.onerror = function getDataIndexError() {\n      console.log('查找数据失败');\n    };\n    getDataIndex.onsuccess = function getDataIndexSuccess() {\n      console.log('查找数据成功');\n      if (!callbackParaArr) {\n        retrieveOneDataCallback(getDataIndex.result);  // 获取数据成功后调用回调函数\n      } else {\n        callbackParaArr.unshift(getDataIndex.result); // 将获取到的数据添加到数组头\n        retrieveOneDataCallback.apply(null, callbackParaArr);\n      }\n    };\n  }\n\n  // 根据传入的条件，读取 未/已 完成的数据，并在读取后调用回调函数\n  function retrieveDataWhetherDone(whether, key, retrieveDataWhetherDoneCallback, callbackParaArr) {\n    var dataArr = []; // 用数组来存储每一条符合要求的数据，最后再统一加入文档节点\n    var storeHander = handleTransaction(true);\n    var range = rangeToAll();\n\n    storeHander.openCursor(range, 'next').onsuccess = function showWhetherDoneData(e) {\n      var cursor = e.target.result;\n\n      if (cursor) {\n        if (whether) {\n          if (cursor.value[key]) {\n            dataArr.push(cursor.value);\n          }\n        } else if (!whether) {\n          if (!cursor.value[key]) {\n            dataArr.push(cursor.value);\n          }\n        }\n        cursor.continue();\n      } else if (retrieveDataWhetherDoneCallback) {\n        if (!callbackParaArr) {\n          retrieveDataWhetherDoneCallback(dataArr);  // 将符合条件的li数据整合为数组传入回调函数\n        } else {\n          callbackParaArr.unshift(dataArr);\n          retrieveDataWhetherDoneCallback.apply(null, callbackParaArr);\n        }\n      }\n    };\n  }\n\n  // 获取数据库的所有数据\n  function retrieveAllData(retrieveAllDataCallback, callbackParaArr) {\n    var storeHander = handleTransaction(true);\n    var range = rangeToAll();\n    var allDataArr = [];\n\n    storeHander.openCursor(range, 'next').onsuccess = function getAllData(e) {\n      var cursor = e.target.result;\n\n      if (cursor) {\n        allDataArr.push(cursor.value);\n        cursor.continue();\n      } else if (retrieveAllDataCallback) {\n        if (!callbackParaArr) {\n          retrieveAllDataCallback(allDataArr);  // 此时数据装载完毕，执行回调函数\n        } else {\n          callbackParaArr.unshift(allDataArr);\n          retrieveAllDataCallback.apply(null, callbackParaArr);\n        }\n      }\n    };\n  }\n\n  // Update: 更新\n  // 更新一个数据同步到数据库中\n  function updateDate(changedData, updateDateCallback, callbackParaArr) {\n    var storeHander = handleTransaction(true);\n\n    console.log(changedData);\n    var putStore = storeHander.put(changedData);\n    putStore.onerror = function putStoreError() {\n      console.log('修改数据失败');\n    };\n    putStore.onsuccess = function putStoreSuccess() {\n      console.log('修改数据成功');\n      if (updateDateCallback) {\n        if (!callbackParaArr) {\n          updateDateCallback();\n        } else {\n          updateDateCallback.apply(null, callbackParaArr);\n        }\n      }\n    };\n  }\n\n  // Delete 删除\n\n  // 删除数据库中的一个数据\n  function deleteOneData(dataId, deleteOneDataCallback, callbackParaArr) {\n    var storeHander = handleTransaction(true);\n    var deleteOpt = storeHander.delete(dataId); // 将当前选中li的数据从数据库中删除\n\n    deleteOpt.onerror = function error() {\n      console.log('删除' + dataId + '到数据库失败');\n    };\n    deleteOpt.onsuccess = function success() {\n      console.log('删除' + dataId +  '到数据库成功');\n      if (deleteOneDataCallback) {\n        if (!callbackParaArr) {\n          deleteOneDataCallback();\n        } else {\n          deleteOneDataCallback.apply(callbackParaArr);\n        }\n      }\n    };\n  }\n\n  // 删除数据库中的所有数据\n  function deleteAllData(deleteAllDataCallback, callbackParaArr) {\n    var storeHander = handleTransaction(true);\n    var range = rangeToAll();\n\n    storeHander.openCursor(range, 'next').onsuccess = function deleteData(e) {\n      var cursor = e.target.result;\n      var requestDel;\n\n      if (cursor) {\n        requestDel = cursor.delete();\n        requestDel.onsuccess = function success() {\n          console.log('删除数据成功');\n        };\n        requestDel.onerror = function error() {\n          console.log('删除全部数据失败');\n        };\n        cursor.continue();\n      } else if (deleteAllDataCallback) {\n        if (!callbackParaArr) {\n          deleteAllDataCallback();\n        } else {\n          deleteAllDataCallback.apply(null, this);\n        }\n      }\n    };\n  }\n\n  function getUserId() {\n    return userID;\n  }\n\n  /* public interface */\n  return {\n    init: init,\n    createOneData: createOneData,\n    retrieveOneData: retrieveOneData,\n    retrieveDataWhetherDone: retrieveDataWhetherDone,\n    retrieveAllData: retrieveAllData,\n    updateDate: updateDate,\n    deleteOneData: deleteOneData,\n    deleteAllData: deleteAllData,\n    getUserId: getUserId\n  };\n}());\n\nmodule.exports = myIndexedDB;\n\n},{}]},{},[1]);\n"]}